# Roteiro de conexão com banco de dados
Conecte-se a um banco de dados SQLite.
Crie três tabelas: Eventos, Participantes e Locais.
Selecione e exiba os dados armazenados.

#Passo 1: Conectar-se ao banco de dados

import sqlite3 as conector

def conectar_banco (nome_banco):
    conexao = sqlite3.connect(nome_banco)
    return conexao

#Passo 2: Criar tabelas
def criar_tabelas(conexao):
    cursor = conexao.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXIST Locais (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nome TEXT NOT NULL,
                    data TEXT NOT NULL''')

    cursor.execute('''CREATE TABLE IF NOT EXIST Eventos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nome TEXT NOT NULL,
                    local_id INTEGER NOT NULL,
                    FOREIGN KEY(local_id) REFERENCES Locais(id))''')

    cursor.execute('''CREATE TABLE IF NOT EXIST Participantes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nome TEXT NOT NULL,
                    email TEXT NOT NULL,
                    evento_id INTEGER NOT NULL,
                    FOREIGN KEY(evento_id) REFERENCES Eventos(id))'''')
   conexao.commit()
   cursor.close()

#Passo 3: Montar o script principal
if __name__ == '__main__':
    conexao = conectar_banco('eventos.db')
    criar_tabelas(conexao)
    conexao.close()

#Passo 4: Executar o script
Abra um terminal ou prompt de comando.
Navegue até o diretório onde o arquivo gerenciamento_eventos.py está salvo.
Execute o script com o comando:

python gerenciamento_eventos.py


class Pessoa:
    def __init__(self, cpf, nome, data_nascimento, usa_oculos):
        self.cpf = cpf
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.usa_oculos = usa_oculos

import sqlite3 as conector
from modelo import Pessoa

# Abertura de conexão e aquisição de cursor
conexao = conector.connect("./meu_banco.db")
cursor = conexao.cursor()

# Criação de um objeto do tipo Pessoa
pessoa = Pessoa(10000000099, 'Maria', '1990-01-31', False)

# Definição de um comando com query parameter
comando = '''INSERT INTO Pessoa (cpf, nome, nascimento, oculos) VALUES (?, ?, ?, ?);'''
cursor.execute(comando, (pessoa.cpf, pessoa.nome, pessoa.data_nascimento, pessoa.usa_oculos))

# Efetivação do comando
conexao.commit()

# Fechamento das conexões
cursor.close()
conexao.close()

import sqlite3 as conector
  from modelo import Pessoa
  
  # Abertura de conexão e aquisição de cursor
  conexao = conector.connect("./meu_banco.db")
  cursor = conexao.cursor()
 
  # Criação de um objeto do tipo Pessoa
  pessoa = Pessoa(20000000099, 'José', '1990-02-28', False)
  
   # Definição de um comando com query parameter
   comando = '''INSERT INTO Pessoa (cpf, nome, nascimento, oculos)
                     VALUES (:cpf,:nome,:data_nascimento,:usa_oculos);'''
   cursor.execute(comando, {"cpf": pessoa.cpf,
                           "nome": pessoa.nome,
                           "data_nascimento": pessoa.data_nascimento,
                           "usa_oculos": pessoa.usa_oculos})
  
   # Efetivação do comando
   conexao.commit()
  
   # Fechamento das conexões
   cursor.close()
   conexao.close()
####################################################################################################################

 class Pessoa:
    def __init__(self, cpf, nome, data_nascimento, usa_oculos):
        self.cpf = cpf
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.usa_oculos = usa_oculos
        self.veiculos = []

 class Marca:
    def __init__(self, id, nome, sigla):
        self.id = id
        self.nome = nome
        self.sigla = sigla

 
 class Veiculo:
    def __init__(self, placa, ano, cor, motor, proprietario, marca):
        self.placa = placa
        self.ano = ano
        self.cor = cor
        self.motor = motor
        self.proprietario = proprietario
        self.marca = marca

 import sqlite3 as conector
 from modelo import Marca, Veiculo
 conexao = conector.connect("./meu_banco.db")
 conexao.execute("PRAGMA foreign_keys = on")
 cursor = conexao.cursor()

 # Inserção de dados na tabela Marca
 comando1 = '''INSERT INTO Marca (nome, sigla) VALUES (:nome, :sigla);'''

 marca1 = Marca(1, "Marca A", "MA")
 cursor.execute(comando1, vars(marca1))
 marca1.id = cursor.lastrowid

 marca2 = Marca(2, "Marca B", "MB")
 cursor.execute(comando1, vars(marca2))
 marca2.id = cursor.lastrowid

 # Inserção de dados na tabela Veiculo
 comando2 = '''INSERT INTO Veiculo
                VALUES (:placa, :ano, :cor, :motor, :proprietario, :marca);'''
 veiculo1 = Veiculo("AAA0001", 2001, "Prata", 1.0, 10000000099, marca1.id)
 veiculo2 = Veiculo("BAA0002", 2002, "Preto", 1.4, 10000000099, marca1.id)
 veiculo3 = Veiculo("CAA0003", 2003, "Branco", 2.0, 20000000099, marca2.id)
 veiculo4 = Veiculo("DAA0004", 2004, "Azul", 2.2, 30000000099, marca2.id)
 cursor.execute(comando2, vars(veiculo1))
 cursor.execute(comando2, vars(veiculo2))
 cursor.execute(comando2, vars(veiculo3))
 cursor.execute(comando2, vars(veiculo4))

 # Efetivação do comando
 conexao.commit()
 # Fechamento das conexões
 cursor.close()
 conexao.close()
